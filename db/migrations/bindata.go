// Code generated by go-bindata.
// sources:
// db/migrations/1_initial.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations1_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xc1\x4e\xf3\x30\x10\x84\xef\x7e\x8a\x3d\x26\xfa\xd3\xc3\x0f\xa8\x42\xea\xc9\x49\xb6\xc5\x22\x71\x8a\xeb\x20\xf5\x54\x45\x60\x51\x4b\xad\x83\x1a\x03\xaf\x8f\xed\xb6\x90\x86\x16\x91\x9b\xbd\xdf\xee\xce\x8c\x33\x1a\xc1\xbf\xad\x7e\xd9\x35\x56\x41\xfd\x4a\x32\x81\x54\x22\x48\x9a\x16\x08\x6f\x9d\xda\x75\x24\x22\x00\xfa\x19\xc2\x97\xdd\x51\x11\x5d\x8f\xe3\xfd\x89\x57\x12\x78\x5d\x14\x30\x17\xac\xa4\x62\x09\xf7\xb8\x4c\x1c\x6d\x9a\xad\xf2\xf5\x47\x2a\x42\xc3\xff\xab\xdb\xf8\x9b\xf6\x84\xda\x36\x7a\x73\x91\x80\x9a\xb3\x87\x1a\x3d\xb8\x6e\xba\xf5\xd7\xe2\xf1\xcd\x60\xb1\x27\xba\x66\x63\x2f\x13\x87\x51\x24\x9e\x90\x53\x6f\xa6\xb5\xea\xd4\x5b\xca\x66\x8c\x4b\x80\xc1\x00\x5a\xcb\x6a\xc5\xb8\x6b\x2e\xd1\x95\x07\x56\x7d\x44\x2b\x37\xe1\x7c\x30\x09\x71\xc8\xb4\x12\xc8\x66\xdc\x77\x40\x74\xe0\x63\x10\x38\x45\x81\x3c\xc3\xc5\x3e\xe6\xc8\x5f\x56\x1c\x72\x2c\xd0\x89\xcc\xe8\x22\xa3\xf9\x19\xdd\x3b\xf5\xae\x3b\xdd\x9a\xbf\x68\x0f\x6f\xe1\x7c\x7a\x81\x97\x89\xa7\xd6\x58\x65\x2c\xa4\x45\x95\xfa\xb3\xd5\xfb\xd7\x93\xac\xc4\x85\xa4\xe5\xfc\xa7\xa5\x5e\x08\xe0\x84\x27\xc7\x2d\x71\x32\xf4\x7b\x2c\xf4\xfd\x86\xe8\x7f\xf1\xdb\xff\x25\xf3\xf6\xc3\x90\x5c\x54\xf3\xa1\xfd\x49\xff\x36\x4c\x3c\xb9\x09\x99\x4e\xc8\x67\x00\x00\x00\xff\xff\x88\x65\xa4\xbe\xde\x02\x00\x00")

func dbMigrations1_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations1_initialSql,
		"db/migrations/1_initial.sql",
	)
}

func dbMigrations1_initialSql() (*asset, error) {
	bytes, err := dbMigrations1_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/1_initial.sql", size: 734, mode: os.FileMode(420), modTime: time.Unix(1450309696, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/1_initial.sql": dbMigrations1_initialSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_initial.sql": &bintree{dbMigrations1_initialSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
